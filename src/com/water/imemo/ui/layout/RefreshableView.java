package com.water.imemo.ui.layout;import java.text.SimpleDateFormat;import java.util.Date;import android.content.Context;import android.os.AsyncTask;import android.util.AttributeSet;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.View.OnTouchListener;import android.view.ViewConfiguration;import android.view.animation.RotateAnimation;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.ProgressBar;import android.widget.TextView;import com.water.imemo.R;import com.water.imemo.utils.Constants;import com.water.imemo.utils.MemoApp;/** * 可以下拉更新 * @author kakukaitu * */public class RefreshableView extends LinearLayout implements OnTouchListener{			private View header;	private ProgressBar progressBar;	private ImageView arrow;	private TextView desc;	private TextView updateAt;		private LayoutInflater inflater;	private int touchSlop;		private long lastUpdateTime;		private boolean loadOnce = false;		private int hideHeaderHeight;	private MarginLayoutParams headerLayoutParams;	private ListView listview;		private boolean ableToPull;		private float yDown;		private final int SCROLL_SPEED = -20;		private final int STATUS_PULL_TO_REFRESH = 0;	private final int STATUS_RELEASE_TO_REFRESH = 1;	private final int STATUS_FERESHING = 2;	private static final int STATUS_REFRESH_FINISHED = 3;		private int currentStatus = STATUS_PULL_TO_REFRESH;	private int lastStatus = STATUS_PULL_TO_REFRESH;		private PullToRefreshListener mListener;			public RefreshableView(Context context, AttributeSet attrs) {		super(context, attrs);		inflater = LayoutInflater.from(context);		header = inflater.inflate(R.layout.pull_to_refresh_header, null,true);		progressBar = (ProgressBar) header.findViewById(R.id.refreshHeaderProgressBar);		arrow = (ImageView) header.findViewById(R.id.refreshHeaderArrow);		desc = (TextView) header.findViewById(R.id.refreshHeaderDesc);		updateAt = (TextView) header.findViewById(R.id.refreshHeaderUpdateAt);		touchSlop = ViewConfiguration.get(context).getScaledTouchSlop();		refreshUpdatedAtValue();		setOrientation(VERTICAL);		addView(header,0);	}	@Override	/**	 * 只在layout初始化时加载一次	 */	protected void onLayout(boolean changed, int l, int t, int r, int b) {		super.onLayout(changed, l, t, r, b);		if(changed && !loadOnce){			hideHeaderHeight = -header.getHeight();			headerLayoutParams = (MarginLayoutParams) header.getLayoutParams();			headerLayoutParams.topMargin = hideHeaderHeight; //隐藏layout			listview = (ListView) getChildAt(1);			listview.setOnTouchListener(this);			loadOnce = true;		}	}	@Override	public boolean onTouch(View view, MotionEvent event) {		setIsAbleToPull(event);		if(ableToPull){			switch (event.getAction()) {			case MotionEvent.ACTION_DOWN:				yDown = event.getRawY();				break;			case MotionEvent.ACTION_MOVE:				float yMove = event.getRawY();				int distance = (int) (yMove - yDown);				if(distance < 0 && headerLayoutParams.topMargin <= hideHeaderHeight){					return false;				}				if(distance < touchSlop){					return false;				}				if(currentStatus != STATUS_FERESHING){					if(headerLayoutParams.topMargin > 0){						currentStatus = STATUS_RELEASE_TO_REFRESH;					}else{						currentStatus = STATUS_PULL_TO_REFRESH;					}				}				headerLayoutParams.topMargin = (distance/2) + hideHeaderHeight;				header.setLayoutParams(headerLayoutParams);				break;			case MotionEvent.ACTION_UP:			default:				if(currentStatus == STATUS_RELEASE_TO_REFRESH){					new RefreshingTask().execute();				}else if(currentStatus == STATUS_PULL_TO_REFRESH){					new HideHeaderTask().execute();				}				break;			}						if(currentStatus == STATUS_PULL_TO_REFRESH || currentStatus == STATUS_RELEASE_TO_REFRESH){				updateHeaderView(); //更新头部信息				listview.setPressed(false);				listview.setFocusable(false);				listview.setFocusableInTouchMode(false);				lastStatus = currentStatus;				return true;			}					}		return false;	}	private void updateHeaderView() {		if(lastStatus != currentStatus){			if(currentStatus == STATUS_PULL_TO_REFRESH){				desc.setText("下拉更新");				arrow.setVisibility(View.VISIBLE);				progressBar.setVisibility(View.GONE);				rotateArrow();			}else if(currentStatus == STATUS_RELEASE_TO_REFRESH){				desc.setText("放开更新");				arrow.setVisibility(View.VISIBLE);				progressBar.setVisibility(View.GONE);				rotateArrow();			}else if(currentStatus == STATUS_FERESHING){				desc.setText("正在更新");				progressBar.setVisibility(View.VISIBLE);				arrow.clearAnimation();				arrow.setVisibility(View.GONE);			}		}		refreshUpdatedAtValue();	}		/**	 * 翻转箭头	 */	private void rotateArrow() {		float pivotX = arrow.getWidth() / 2;		float pivotY = arrow.getHeight() / 2;				float fromDegrees = 0f;		float toDegrees = 0f;				if(currentStatus == STATUS_PULL_TO_REFRESH){			fromDegrees = 180f;			toDegrees = 360;		}else if(currentStatus == STATUS_RELEASE_TO_REFRESH){			fromDegrees = 0f;			toDegrees = 180;		}		RotateAnimation anim = new RotateAnimation(fromDegrees, toDegrees, pivotX, pivotY);		anim.setDuration(100);		anim.setFillAfter(true); //停留在最后一帧		arrow.startAnimation(anim);	}	private void setIsAbleToPull(MotionEvent event) {		View firstChild = listview.getChildAt(0);		if(firstChild != null){			int firstChildPos = listview.getFirstVisiblePosition();			if(firstChildPos == 0 && firstChild.getTop() == 0){				if(!ableToPull){					yDown = event.getRawY();				}				ableToPull = true;			}else{				if(headerLayoutParams.topMargin != hideHeaderHeight){					headerLayoutParams.topMargin = hideHeaderHeight;					header.setLayoutParams(headerLayoutParams);				}				ableToPull = false;			}		}else{			ableToPull = true;		}	}	private void refreshUpdatedAtValue() {		lastUpdateTime = MemoApp.getInstance().getLong(Constants.UPDATE_AT);		long currentTime = System.currentTimeMillis();		long timePass = currentTime - lastUpdateTime;		String updateAtString = "";				if(lastUpdateTime == 0l){			updateAtString = "未更新";		}else{			SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");			updateAtString = sdf.format(new Date(currentTime)) + "更新过";		}		updateAt.setText(updateAtString);	}		public void setOnRefreshListener(PullToRefreshListener listener){		this.mListener = listener;	}		public void finishRefreshing(){		currentStatus = STATUS_REFRESH_FINISHED;		MemoApp.getInstance().setLong(Constants.UPDATE_AT, System.currentTimeMillis());		new HideHeaderTask().execute();	}		class RefreshingTask extends AsyncTask<Void, Integer, Void>{		@Override		protected Void doInBackground(Void... arg0) {			int topMargin = headerLayoutParams.topMargin;			while(true){				topMargin = topMargin + SCROLL_SPEED;				if(topMargin <= 0){					topMargin = 0;					break;				}				publishProgress(topMargin);				sleep(10);			}			currentStatus = STATUS_FERESHING;			publishProgress(0);			if(mListener != null){				mListener.onRefresh();			}			return null;		}				@Override		protected void onProgressUpdate(Integer... values) {			updateHeaderView();			headerLayoutParams.topMargin = values[0];			header.setLayoutParams(headerLayoutParams);		}	}		class HideHeaderTask extends AsyncTask<Void, Integer, Integer>{		@Override		protected Integer doInBackground(Void... arg0) {			int topMargin = headerLayoutParams.topMargin;			while(true){				topMargin = topMargin + SCROLL_SPEED;				if(topMargin <= hideHeaderHeight){					topMargin = hideHeaderHeight;					break;				}				publishProgress(topMargin);				sleep(10);			}			return topMargin;		}						@Override		protected void onPostExecute(Integer result) {			headerLayoutParams.topMargin = result;			header.setLayoutParams(headerLayoutParams);			currentStatus = STATUS_REFRESH_FINISHED;		}		@Override		protected void onProgressUpdate(Integer... values) {			headerLayoutParams.topMargin = values[0];			header.setLayoutParams(headerLayoutParams);		}			}		private void sleep(long time){		try {			Thread.sleep(time);		} catch (InterruptedException e) {			e.printStackTrace();		}	}		/**	 * 刷新任务接口	 * @author kakukaitu	 */	public interface PullToRefreshListener{		void onRefresh();	}	}