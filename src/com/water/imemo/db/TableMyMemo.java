package com.water.imemo.db;import java.util.ArrayList;import java.util.List;import com.water.imemo.bean.MyMemo;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.provider.BaseColumns;import android.util.Log;public class TableMyMemo implements DBTableInterface{		private static final String TAG = TableMyMemo.class.getSimpleName();	public static final String TABLENAME = "memo";	public static final String C_ID = BaseColumns._ID;	public static final String C_CONTENT = "content";	public static final String C_POSTTIME = "posttime";	public static final String C_MODIFYTIME = "modifytime";		private static final String[] ALL_COLUMNN = {C_ID,C_CONTENT,C_POSTTIME,C_MODIFYTIME};		@Override	public void onInit(SQLiteDatabase database) {		StringBuilder sql = new StringBuilder("create table ").append(TABLENAME).append(" if nots exists ( ");		sql.append(C_ID).append(" int autoincrease primary key,")		.append(C_CONTENT).append(" text,")		.append(C_POSTTIME).append(" int,")		.append(C_MODIFYTIME).append(" int);");		database.execSQL(sql.toString());		Log.d(TAG, "db sql:"+sql.toString());	}	@Override	public void onUpgrade(SQLiteDatabase database, int newVersion,int oldVersion) {		//dummy	}		public MyMemo getMemo(SQLiteDatabase database,int id){		String[] params = {String.valueOf(id)};		Cursor cursor = null;		try{			cursor = database.query(TABLENAME, 					ALL_COLUMNN, 					C_ID, params,					null, null, null, "limit 0 ,1");			if(cursor.moveToNext()){				return assemble(cursor);			}		}finally{			if(cursor != null){				cursor.close();			}		}		return null;	}		public List<MyMemo> getMemo(SQLiteDatabase database, int from , int length){		List<MyMemo> retVal = new ArrayList<MyMemo>();		Cursor cursor = null;		try{			cursor = database.query(TABLENAME, 					ALL_COLUMNN, 					null, null,					null, null, "order by " + C_MODIFYTIME +" desc", "limit "+from+","+length);			while(cursor.moveToNext()){				retVal.add(assemble(cursor));			}		}finally{			if(cursor != null){				cursor.close();			}		}		return retVal;	}		private MyMemo assemble(Cursor cursor) {		MyMemo memo = new MyMemo();		memo.setId(cursor.getInt(0));		memo.setContent(cursor.getString(1));		memo.setPosttime(cursor.getInt(2) * 1000l);		memo.setModifytime(cursor.getInt(3) * 1000l);		return memo;	}			}